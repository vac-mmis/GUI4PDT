# This file is a template, and might need editing before it works on your project.
# This is a sample GitLab CI/CD configuration file that should run without any modifications.
# It demonstrates a basic 3 stage CI/CD pipeline. Instead of real tests or scripts,
# it uses echo commands to simulate the pipeline execution.
#
# A pipeline is composed of independent jobs that run scripts, grouped into stages.
# Stages run in sequential order, but jobs within stages run in parallel.
#
# For more information, see: https://docs.gitlab.com/ee/ci/yaml/index.html#stages
#
# You can copy and paste this template into a new `.gitlab-ci.yml` file.
# You should not add this template to an existing `.gitlab-ci.yml` file by using the `include:` keyword.
#
# To contribute improvements to CI/CD templates, please follow the Development guide at:
# https://docs.gitlab.com/ee/development/cicd/templates.html
# This specific template is located at:
# https://gitlab.com/gitlab-org/gitlab/-/blob/master/lib/gitlab/ci/templates/Getting-Started.gitlab-ci.yml
image: node:lts-alpine

stages: # List of stages for jobs, and their order of execution
    - install
    - build
    - quality
    - deploy

variables:
  frontend_npm_config_cache: "$CI_PROJECT_DIR/frontend/.npm/"
  backend_npm_config_cache: "$CI_PROJECT_DIR/backend/.npm/"

# Define a hidden job to be used with extends
# Better than default to avoid activating cache for all jobs
    
frontend:install:
  stage: install
  script:
    - cd frontend
    - npm install
    - cd ..
  artifacts:
    name: "front_artifacts"
    untracked: true
    expire_in: 1h
    paths:
      - frontend/node_modules/
      - frontend/.npm/
  tags:
    - nodejs
    
backend:install:
  stage: install
  script:
    - cd backend
    - npm install
    - cd ..
  artifacts:
    name: "back_artifacts"
    untracked: true
    expire_in: 1h
    paths:
      - backend/node_modules/
      - backend/.npm/
  tags:
    - nodejs
    
frontend:build: 
  stage: build
  tags:
    - nodejs
  script:
    - cd frontend
    - echo "Building frontend..."
    - npm run build
    - echo "Frontend build complete."
    - cd ..
  artifacts:
    paths:
      - frontend/dist
    expire_in: 30 mins
  dependencies:
    - frontend:install

backend:build: 
  stage: build
  tags:
    - nodejs
  script:
    - cd backend
    - echo "Building backend..."
    - npm run build
    - echo "Backend build complete."
    - cd ..
  artifacts:
    paths:
      - backend/dist
    expire_in: 30 mins
  dependencies:
    - backend:install

frontend:lint: 
  stage: quality 
  tags:
      - nodejs
  script:
    - cd frontend
    - npm run lint
    - echo "No lint issues found."
    - cd ..
  dependencies:
    - frontend:install
    
backend:lint: 
  stage: quality 
  tags:
    - nodejs
  script:
    - cd backend
    - npm run lint
    - echo "No lint issues found."
    - cd ..
  dependencies:
    - backend:install

frontend:test:unit:
  stage : quality
  tags:
    - nodejs
  script :
    - echo "Start frontend test..."
    - cd frontend
    - echo "Add Vitest test execution here"
    - cd ..
    - echo "Frontend test succeeded."
  dependencies:
    - frontend:install

backend:test:unit:
  stage : quality
  tags:
    - nodejs
  script :
    - echo "Start backend test..."
    - cd backend
    - echo "Add backend test execution here"
    - cd ..
    - echo "Frontend test succeeded."
  dependencies:
    - backend:install

deploy:
  stage: deploy
  tags:
    - docker
    - nodejs
  environment: production
  script:
    - echo "Deploying application..."
    - echo "Add deployment here"
    - echo "Application successfully deployed."
  when: manual
