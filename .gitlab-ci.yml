# This file is a template, and might need editing before it works on your project.
# This is a sample GitLab CI/CD configuration file that should run without any modifications.
# It demonstrates a basic 3 stage CI/CD pipeline. Instead of real tests or scripts,
# it uses echo commands to simulate the pipeline execution.
#
# A pipeline is composed of independent jobs that run scripts, grouped into stages.
# Stages run in sequential order, but jobs within stages run in parallel.
#
# For more information, see: https://docs.gitlab.com/ee/ci/yaml/index.html#stages
#
# You can copy and paste this template into a new `.gitlab-ci.yml` file.
# You should not add this template to an existing `.gitlab-ci.yml` file by using the `include:` keyword.
#
# To contribute improvements to CI/CD templates, please follow the Development guide at:
# https://docs.gitlab.com/ee/development/cicd/templates.html
# This specific template is located at:
# https://gitlab.com/gitlab-org/gitlab/-/blob/master/lib/gitlab/ci/templates/Getting-Started.gitlab-ci.yml
image: node:lts-alpine

stages: # List of stages for jobs, and their order of execution
    - setup
    - lint
    - build
    - test
    - deploy

variables:
  frontend_npm_config_cache: "$CI_PROJECT_DIR/frontend/.npm"
  backend_npm_config_cache: "$CI_PROJECT_DIR/backend/.npm"

# Define a hidden job to be used with extends
# Better than default to avoid activating cache for all jobs
.main_dependancies_cache:
  cache:
    key:
      files:
        - package-lock.json
    paths:
      - .npm
    policy: pull
  tags:
    - nodejs

.dep_cache_frontend:
  cache:
    key:
      files:
        - frontend/package-lock.json
    paths:
      - frontend/.npm
    policy: pull
  tags:
    - nodejs

.dep_cache_backend:
  cache:
    key:
      files:
        - backend/package-lock.json
    paths:
      - backend/.npm
    policy: pull
  tags:
    - nodejs
    
frontend_setup:
  stage: setup
  script:
    - cd frontend
    - npm ci
    - cd ..
  extends: .dep_cache_frontend
  cache:
    policy: pull-push
  artifacts:
    expire_in: 1h
    paths:
      - frontend/node_modules
  tags:
    - nodejs
    
backend_setup:
  stage: setup
  script:
    - cd backend
    - npm ci
    - cd ..
  extends: .dep_cache_backend
  cache:
    policy: pull-push
  artifacts:
    expire_in: 1h
    paths:
      - backend/node_modules
  tags:
    - nodejs
    
lint_frontend: 
  stage: lint 
  tags:
      - nodejs
  script:
    - cd frontend
    - npm run lint
    - echo "No lint issues found."
    - cd ..
    
lint_backend: 
  stage: lint 
  tags:
    - nodejs
  script:
    - cd backend
    - npm run lint
    - echo "No lint issues found."
    - cd ..
    
build_frontend: 
  stage: build
  tags:
    - nodejs
  script:
    - cd frontend
    - echo "Building frontend..."
    - npm run build
    - echo "Frontend build complete."
    - cd ..

build_backend:
  stage: build
  tags:
    - nodejs
  script:
    - cd backend
    - echo "Building backend..."
    - npm run build
    - echo "Backend build complete."
    - cd ..

test_frontend:
  stage : test
  tags:
    - nodejs
  script :
    - echo "Start frontend test..."
    - cd frontend
    - echo "Add Vitest test execution here"
    - cd ..
    - echo "Frontend test succeeded."

test_backend:
    stage : test
    tags:
    - nodejs
    script :
      - echo "Start backend test..."
      - cd backend
      - echo "Add Vitest test execution here"
      - cd ..
      - echo "Frontend test succeeded."

deploy:
    stage: deploy
    tags:
      - docker
      - nodejs
    environment: production
    script:
        - echo "Deploying application..."
        - echo "Add deployment here"
        - echo "Application successfully deployed."
